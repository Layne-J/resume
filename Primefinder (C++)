//this is a function that will find and print out all prime numbers between two ints to the terminal
//it will also give a runtime to show how long it took to run the program

#include <iostream>
#include <vector>
#include <chrono>

using namespace std::chrono;

bool isPrime(int number) {
    if (number <= 1) {
        return false;
    }

    for (int i = 2; i*i <= number; i++) {
        if (number % i == 0) {
            return false;
        }
    }

    return true;
}

std::vector<int> generatePrimeList(int start, int ending) {
    std::vector<int> primes;

    for (int i = start; i <= ending; i++) {
        if (isPrime(i)) {
            primes.push_back(i);
        }
    }

    return primes;
}

int main() {
    auto beg = high_resolution_clock::now();

//this is the starting point of the search
    int start = 1;

//this is the ending point of the search
    int ending = 100;
    
    std::vector<int> primeList = generatePrimeList(start, ending);

    std::cout << "Prime numbers within the range " << start << " to " << ending << " are:\n";

//this will organize the numbers so they are more clearly readable for the user

   for (int prime : primeList) {
         std::cout << prime << " ";
        if (prime <= 9){ std::cout<<"     ";}
        else if (prime <= 99){ std::cout <<"    ";}
        else if (prime <= 999){ std::cout <<"   ";}
        else if (prime <= 9999){ std::cout <<"  ";}
        else if (prime <= 99999){ std::cout <<" ";}

    }
    std::cout << std::endl;

    auto end = high_resolution_clock::now();
    auto duration = duration_cast<microseconds>(end - beg);
    std::cout << "Elapsed Time: " << duration.count() << " microseconds";

    return 0;
}
